
variables:
  GIT_STRATEGY: clone
  GIT_CLEAN_FLAGS: none
  IMAGE_NAME: $CI_REGISTRY_IMAGE
  IMAGE_FRONTEND_TAG: "frontend"
  IMAGE_BACKEND_TAG: "backend"
  STAGE_IMAGE_APP_TAG: "hackathon-$IMAGE_TAG"
  PROD_IMAGE_APP_TAG: "hackathon-$IMAGE_TAG"
  PROJECT_PATH: "/opt/data/docker/containers/hackathon-manager"
  DOCKER_COMPOSE_FILE: "/opt/data/docker/containers/hackathon-manager/docker-compose.yaml"
  RUNNER_FOLDER: "/opt/data/gitlab-runner/builds/t1_bMHsFQ/0/hackathon/hackathon-manager"
  RUNNER_FOLDER_PROD: "/opt/data/gitlab-runner/builds/t1_5JD6zW/0/hackathon/hackathon-manager"

.default_trigger:
  rules:
    # Automatisch bei Merge-Request auf staging
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"

    # Zeitgesteuerter oder API-basierter Trigger
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "api"

    # Automatisch auf staging
    - if: $CI_COMMIT_BRANCH == "develop"

    # Main: Nur über Web und nur als "manual" Schritt
    # - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "web"
    - if: '$CI_PIPELINE_SOURCE == "web" && ($CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "develop")'
      when: manual
      allow_failure: false


default:
  tags:    
    - shell
    - staging

stages:
  - build-frontend-image
  - build-backend-image
  - build
  - test
  - deploy

build-frontend-image-staging:
  tags:    
    - shell
    - staging

  stage: build-frontend-image
  
  script:
    - echo "Logging into Docker registry"
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    - echo "Source $CI_PIPELINE_SOURCE"
    - echo "Branch $CI_COMMIT_BRANCH"
    - pwd
    - whoami
    - node -v
    - ls -lah
    - cd ./frontend/
    - npm install
    - npm run build
    - docker build -t $IMAGE_NAME:$IMAGE_FRONTEND_TAG -f Dockerfile .
    - docker push $IMAGE_NAME:$IMAGE_FRONTEND_TAG
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      exists:
        - ./frontend/**/*
      changes:
        - ./frontend/**/*

build-frontend-image-production:
  tags:    
    - shell
    - production

  stage: build-frontend-image
  
  script:
    - echo "Logging into Docker registry"
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    - echo "Source $CI_PIPELINE_SOURCE"
    - echo "Branch $CI_COMMIT_BRANCH"
    - pwd
    - whoami
    - node -v
    - ls -lah
    - cd ./frontend/
    - npm install
    - npm run build
    - docker build -t $IMAGE_NAME:$IMAGE_FRONTEND_TAG -f Dockerfile .
    - docker push $IMAGE_NAME:$IMAGE_FRONTEND_TAG
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      exists:
        - ./frontend/**/*  # Optional als Ergänzung zu 'changes', je nach Setup
      changes:
        - ./frontend/**/*


build-backend-image-staging:
  tags:    
    - shell
    - staging

  stage: build-backend-image
  script:
    - echo "Logging into Docker registry"
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    - echo "Source $CI_PIPELINE_SOURCE"
    - echo "Branch $CI_COMMIT_BRANCH"
    - pwd
    - ls -lah
    - cd ./backend
    - docker build -t $IMAGE_NAME:$IMAGE_BACKEND_TAG -f Dockerfile .
    - docker push $IMAGE_NAME:$IMAGE_BACKEND_TAG
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      exists:
        - ./DOCKER-CONFIG/backend/**/*  # Optional als Ergänzung zu 'changes', je nach Setup
      changes:
        - ./DOCKER-CONFIG/backend/**/*


build-backend-image-production:
  tags:    
    - shell
    - staging

  stage: build-backend-image
  script:
    - echo "Logging into Docker registry"
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    - echo "Source $CI_PIPELINE_SOURCE"
    - echo "Branch $CI_COMMIT_BRANCH"
    - pwd
    - ls -lah
    - cd ./backend
    - docker build -t $IMAGE_NAME:$IMAGE_BACKEND_TAG -f Dockerfile .
    - docker push $IMAGE_NAME:$IMAGE_BACKEND_TAG
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      exists:
        - ./DOCKER-CONFIG/backend/**/*  
      changes:
        - ./DOCKER-CONFIG/backend/**/*


build-job:
  tags:    
    - docker
    - staging
    
  stage: build
  script:
    - echo "Compiling the code..."
    - cd ./frontend    
    - npm install
    - npm run build
    - ls -lah
    - cd dist
    - echo "Build compilation complete."
  artifacts:
    paths:
      - frontend/dist/  
    expire_in: 1 hour  
#  when: manual        
  rules:
    !reference [.default_trigger, rules ]

.unit-test-job:
  tags:    
    - docker
    - staging
  stage: test 
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 1
    - echo "Code coverage to be done"
  rules:
    !reference [.default_trigger, rules ]    


.lint-test-job:
  tags:    
    - docker
    - staging  
  stage: test
  script:
    - npm ci  
    - npx eslint . 
  rules:
    - changes:
      - "**/*.js"  
#  rules:
#    !reference [.default_trigger, rules ]        
  


deploy-staging:
  tags:    
    - shell
    - staging

  needs:
    - job: build-job  

  stage: deploy 
  environment: staging

  script:
    - echo "Deploying application..."
    - mkdir -p $PROJECT_PATH
    - echo $PROJECT_PATH
    - cd $PROJECT_PATH
    - echo "delete Docker-Stack"
    - docker-compose down 
    - cd $RUNNER_FOLDER
    - pwd
    - ls -lah
    - cp -rf . /DOCKER/containers/hackathon-manager/
    - cd $PROJECT_PATH    
    - docker-compose down --remove-orphans --timeout 30
    - echo "restart Docker-Stack"
    - cd $PROJECT_PATH
    - docker-compose up -d --build
  rules:
    !reference [.default_trigger, rules ]
    
deploy-production:
  tags:    
    - shell
    - production
    
  stage: deploy
  environment: production

  script:
    - echo "Deploying application to production..."
    - mkdir -p $PROJECT_PATH
    - cd $PROJECT_PATH
    - echo "Delete Docker-Stack"
    - docker compose down --remove-orphans --timeout 30
    - cd $RUNNER_FOLDER_PROD
    - cp -rf . /DOCKER/containers/hackathon-manager/
    - echo "Restart Docker-Stack"
    - cd $PROJECT_PATH
    - docker compose up -d --build
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "web"'
      when: manual
      allow_failure: false
